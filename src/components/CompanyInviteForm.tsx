
import React, { useState } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { supabase } from '@/integrations/supabase/client';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';
import { Mail, UserPlus } from 'lucide-react';

interface CompanyInviteFormProps {
  companyId: string;
  companyName: string;
  onInviteSent?: () => void;
}

const CompanyInviteForm = ({ companyId, companyName, onInviteSent }: CompanyInviteFormProps) => {
  const { user } = useAuth();
  const { toast } = useToast();
  const [email, setEmail] = useState('');
  const [role, setRole] = useState('Member');
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!user || !email.trim()) return;

    setIsLoading(true);
    console.log('Sending invitation:', { email, role, companyId });

    try {
      const { error } = await supabase
        .from('company_invitations')
        .insert([{
          email: email.trim(),
          company_id: companyId,
          role: role,
          status: 'pending'
          // token will be auto-generated by the trigger
        }]);

      if (error) {
        console.error('Error sending invitation:', error);
        throw error;
      }

      console.log('Invitation sent successfully');
      
      toast({
        title: 'Invitation sent!',
        description: `An invitation has been sent to ${email} to join ${companyName} as ${role}.`
      });

      setEmail('');
      setRole('Member');
      onInviteSent?.();
    } catch (error: any) {
      console.error('Error in handleSubmit:', error);
      toast({
        title: 'Error sending invitation',
        description: error.message,
        variant: 'destructive'
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center">
          <UserPlus className="h-5 w-5 mr-2" />
          Invite Team Member
        </CardTitle>
        <CardDescription>
          Send an invitation to join {companyName}
        </CardDescription>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="email">Email Address</Label>
            <div className="relative">
              <Mail className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
              <Input
                id="email"
                type="email"
                placeholder="Enter email address"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="pl-10"
                required
              />
            </div>
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="role">Role</Label>
            <Select value={role} onValueChange={setRole}>
              <SelectTrigger>
                <SelectValue placeholder="Select role" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="Admin">Admin</SelectItem>
                <SelectItem value="Member">Member</SelectItem>
                <SelectItem value="Viewer">Viewer</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <Button type="submit" disabled={isLoading} className="w-full">
            {isLoading ? 'Sending...' : 'Send Invitation'}
          </Button>
        </form>
      </CardContent>
    </Card>
  );
};

export default CompanyInviteForm;
